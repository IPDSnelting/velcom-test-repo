#!/usr/bin/env python3

import sys
import subprocess
from noise import pnoise1
from typing import Dict, Any, List
import json
import random


def random_noise(value: float) -> float:
    return pnoise1(
        value,
        octaves=1,
        persistence=0.5,
        lacunarity=2.0,
        repeat=20_000,
        base=0
    )


def noisy_value(value: float) -> List[float]:
    return [
        random.uniform(value*0.5, value*1.5) for _ in range(0, random.randint(1, 10))
    ]


benchmarks = ["BenchMe", "Beat this"]
metrics = [
    ("cats in the cradle", "dogs", "LESS_IS_BETTER", 15),
    ("oracle", "pain", "LESS_IS_BETTER", 20),
    ("magic", "wtf/min", "MORE_IS_BETTER", 5),
    ("size", "lines", "NEUTRAL", 10)
]

if __name__ == '__main__':
    commit_number = int(subprocess.check_output(
        ["git", "-C", sys.argv[1], "show", "-s", "--format=%s", "HEAD"]
    ))

    random.seed(commit_number)

    result: Dict[str, Any] = {}

    for benchmark in benchmarks:
        benchmark_result: Dict[str, Any] = {}
        result[benchmark] = benchmark_result

        for metric, unit, interpretation, scale in metrics:
            value = random_noise(commit_number / 117) * scale
            metric_result = {
                "results": noisy_value(value),
                "unit": unit,
                "resultInterpretation": interpretation,
            }
            benchmark_result[metric] = metric_result

    print(json.dumps(result))
